name: Daily Errata Scraper

on:
  schedule:
    # Run daily at 7 AM Eastern (11 AM UTC)
    - cron: '0 11 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  scrape-errata:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: main
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
        
        # Install Chrome
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Get Chrome version
        CHROME_VERSION=$(google-chrome --version | sed 's/Google Chrome //' | cut -d '.' -f1-3)
        echo "Chrome version: $CHROME_VERSION"
        
        # Install ChromeDriver using the new Chrome for Testing API
        # Get the latest stable ChromeDriver version that matches Chrome
        CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_$CHROME_VERSION" 2>/dev/null || echo "")
        
        # If that fails, try getting the latest stable version
        if [ -z "$CHROMEDRIVER_VERSION" ]; then
          echo "Specific version not found, getting latest stable..."
          CHROMEDRIVER_VERSION=$(curl -s "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE")
        fi
        
        echo "ChromeDriver version: $CHROMEDRIVER_VERSION"
        
        # Download and install ChromeDriver from new location
        wget -O /tmp/chromedriver.zip "https://storage.googleapis.com/chrome-for-testing-public/$CHROMEDRIVER_VERSION/linux64/chromedriver-linux64.zip"
        sudo unzip /tmp/chromedriver.zip -d /tmp/
        sudo mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Verify installations
        google-chrome --version
        chromedriver --version
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create .env file
      run: |
        echo "ERRATA_USERNAME=${{ secrets.ERRATA_USERNAME }}" > .env
        echo "ERRATA_PASSWORD=${{ secrets.ERRATA_PASSWORD }}" >> .env
    
    - name: Debug environment
      run: |
        echo "Current directory: $(pwd)"
        echo "Python version: $(python --version)"
        echo "Files in current directory:"
        ls -la
        echo "Files in src directory:"
        ls -la src/ || echo "No src directory found"
        echo "Environment variables:"
        env | grep -E "(GITHUB|CI|ERRATA)" || echo "No relevant env vars"
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p output/backups
    
    - name: Run errata scraper
      run: |
        echo "Starting extraction..."
        python extract_all.py
        echo "Extraction completed"
    
    - name: Check for changes
      id: check_changes
      run: |
        if [[ -n $(git status --porcelain) ]]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Changes detected in CSV data"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No changes detected"
        fi
    
    - name: Commit and push changes
      if: steps.check_changes.outputs.changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add only the files we want to commit (respect .gitignore)
        git add output/sample_errata_changes.csv
        
        # Add logs if they exist and aren't ignored
        if [ -d "logs" ] && [ -n "$(ls -A logs 2>/dev/null)" ]; then
          git add logs/ || echo "Logs directory ignored or not found"
        fi
        
        # Show what we're about to commit
        echo "Files to be committed:"
        git diff --cached --name-only
        
        git commit -m "🤖 Daily errata update - $(date +'%Y-%m-%d %H:%M UTC')"
        git push origin main
    
    - name: Create summary
      if: always()
      run: |
        echo "## 📊 Daily Errata Scraper Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Run Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.check_changes.outputs.changes }}" == "true" ]]; then
          echo "**Changes:** ✅ New errata data found and committed" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Changes:** ℹ️ No new errata data found" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ -f "logs/extraction.log" ]]; then
          echo "### 📝 Extraction Log (Last 20 lines)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          tail -20 logs/extraction.log >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Upload logs as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: errata-scraper-logs-${{ github.run_number }}
        path: logs/
        retention-days: 30
